import logging
import discord
from discord import Interaction, Member
from discord.ui import Modal, TextInput

log = logging.getLogger(__name__)

class RejectModal(Modal):
    def __init__(self, target: Member):
        super().__init__(title="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞")
        self.target = target
        self.reason = TextInput(label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", style=discord.TextStyle.paragraph, required=True)
        self.add_item(self.reason)

    async def on_submit(self, interaction: Interaction):
        try:
            await self.target.kick(reason=self.reason.value)
            content = f"‚ùå {self.target.mention} –∫–∏–∫–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: {self.reason.value}"
        except Exception as e:
            log.exception("kick failed")
            content = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å: {e}"
        await interaction.response.send_message(content, ephemeral=True)


class AdditionalDataModal(Modal):
    def __init__(self, target: Member):
        super().__init__(title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        self.target = target
        self.twink = TextInput(label="–¢–≤–∏–Ω–∫? (–¥–∞/–Ω–µ—Ç)", style=discord.TextStyle.short, required=True)
        self.owner = TextInput(label="–í–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞", style=discord.TextStyle.short, required=False)
        self.add_item(self.twink)
        self.add_item(self.owner)

    async def on_submit(self, interaction: Interaction):
        content = (
            f"üíæ –î–æ–ø. –¥–∞–Ω–Ω—ã–µ –ø–æ {self.target.mention}:\n"
            f"‚Ä¢ –¢–≤–∏–Ω–∫: {self.twink.value}\n"
            f"‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: {self.owner.value or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
        await interaction.response.send_message(content, ephemeral=True)
