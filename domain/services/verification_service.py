from discord import Guild, Member
from domain.models.verification import VerificationRequest, VerificationResult

class VerificationService:
    def __init__(self, gender_roles: dict[str, int], unverified_role_id: int):
        self.gender_roles = gender_roles
        self.unverified_role_id = unverified_role_id

    async def verify_user(
        self, guild: Guild, user: Member, data: VerificationRequest
    ) -> VerificationResult:
        try:
            # 1) –°–Ω–∏–º–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –≥–µ–Ω–¥–µ—Ä‚Äë—Ä–æ–ª–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤—É—Ö —Å—Ä–∞–∑—É
            for rid in self.gender_roles.values():
                r = guild.get_role(rid)
                if r and r in user.roles:
                    await user.remove_roles(r)
            # 2) –°–Ω–∏–º–∞–µ–º Unverified
            uv = guild.get_role(self.unverified_role_id)
            if uv and uv in user.roles:
                await user.remove_roles(uv)
            # 3) –í—ã–¥–∞—ë–º –Ω–æ–≤—É—é –≥–µ–Ω–¥–µ—Ä‚Äë—Ä–æ–ª—å
            gr = guild.get_role(self.gender_roles[data.gender])
            await user.add_roles(gr)
            return VerificationResult(user_id=user.id, success=True, reason="OK")
        except Exception as e:
            return VerificationResult(user_id=user.id, success=False, reason=str(e))

    async def unverify_user(
        self, guild: Guild, user: Member, reason: str
    ) -> VerificationResult:
        try:
            # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –≥–µ–Ω–¥–µ—Ä‚Äë—Ä–æ–ª–∏
            for rid in self.gender_roles.values():
                r = guild.get_role(rid)
                if r and r in user.roles:
                    await user.remove_roles(r)
            # –í—ã–¥–∞—ë–º Unverified
            uv = guild.get_role(self.unverified_role_id)
            if uv:
                await user.add_roles(uv)
            return VerificationResult(user_id=user.id, success=True, reason=reason)
        except Exception as e:
            return VerificationResult(user_id=user.id, success=False, reason=str(e))

    async def change_gender_user(
        self, guild: Guild, user: Member, new_gender: str
    ) -> VerificationResult:
        try:
            # üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ API, –Ω–µ –∏–∑ –∫—ç—à–∞)
            user = await guild.fetch_member(user.id)

            target_id = self.gender_roles[new_gender]
            target_role = guild.get_role(target_id)

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å
            if target_role in user.roles:
                return VerificationResult(
                    user_id=user.id,
                    success=False,
                    reason="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —ç—Ç–∞ —Ä–æ–ª—å"
                )

            # üîÅ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ä–æ–ª–∏
            for rid in self.gender_roles.values():
                r = guild.get_role(rid)
                if r and r in user.roles:
                    await user.remove_roles(r)

            # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            await user.add_roles(target_role)

            return VerificationResult(user_id=user.id, success=True, reason="OK")

        except Exception as e:
            return VerificationResult(user_id=user.id, success=False, reason=str(e))

